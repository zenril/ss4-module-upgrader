"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SINGLE_DASH = '-';
var DOUBLE_DASH = '--';
var EQUAL = '=';
var ArgumentManager = (function () {
    function ArgumentManager() {
        var _this = this;
        this.shorts = [];
        this.longs = [];
        this.defaults = [];
        this.registeredShorts = [];
        this.registeredLongs = [];
        var args = process.argv.slice(2);
        args.forEach(function (arg, i) {
            if (arg.length > 2 && arg.indexOf(DOUBLE_DASH) === 0) {
                _this.longs.push(arg.slice(2));
            }
            else if (arg.length > 1 && arg.indexOf(SINGLE_DASH) === 0) {
                var shorts = arg.split('');
                shorts.forEach(function (short) {
                    _this.shorts.push(short);
                });
            }
            else {
                _this.defaults.push(arg);
            }
        });
    }
    ArgumentManager.prototype.getValue = function (arg, value) {
        var indexEqual = arg.indexOf(EQUAL);
        if (indexEqual !== -1) {
            return arg.substr(indexEqual + 1);
        }
        else {
            return value;
        }
    };
    ArgumentManager.prototype.indexOf = function (arr, arg) {
        for (var i = 0; i < arr.length; i++) {
            if (typeof arr[i] === 'string' && arr[i].indexOf(arg) === 0)
                return i;
        }
        return -1;
    };
    ArgumentManager.prototype.callArg = function (lngShrt, arg, defaultValue, callback) {
        var index = this.indexOf(lngShrt, arg);
        if (index !== -1) {
            var value = this.getValue(lngShrt[index], defaultValue);
            callback(value, defaultValue);
            return true;
        }
        return false;
    };
    ArgumentManager.prototype.remove = function (arg) {
        var longIndex = this.longs.indexOf(arg.getLong());
        var shortIndex = this.shorts.indexOf(arg.getShort());
        if (longIndex !== -1)
            this.longs[longIndex] = '';
        if (shortIndex !== -1)
            this.shorts[shortIndex] = '';
    };
    ArgumentManager.prototype.onDefault = function (callback) {
        callback(this.defaults);
    };
    ArgumentManager.prototype.on = function (arg, callback) {
        this.register(arg);
        var defaultValue = arg.getDefaultValue();
        var called = this.callArg(this.longs, arg.getLong(), defaultValue, callback) ||
            this.callArg(this.shorts, arg.getShort(), defaultValue, callback);
        if (called) {
            this.remove(arg);
        }
    };
    ArgumentManager.prototype.register = function (arg) {
        this.checkRegistered(arg);
        this.registeredLongs.push(arg.getLong());
        this.registeredShorts.push(arg.getShort());
    };
    ArgumentManager.prototype.checkRegistered = function (arg) {
        if (this.indexOf(this.registeredLongs, arg.getLong()) !== -1) {
            throw 'The long argument ' + arg.getLong() + ' has already been registered';
        }
        if (this.indexOf(this.registeredShorts, arg.getShort()) !== -1) {
            throw 'The short argument ' + arg.getShort() + ' has already been registered';
        }
    };
    return ArgumentManager;
}());
exports.ArgumentManager = ArgumentManager;
var Argument_1 = require("./Argument");
exports.Argument = Argument_1.Argument;
